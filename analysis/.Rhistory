#load metadata
sample_metadata <- read.csv('data/mtstp_analysis_metadata.tsv', sep="\t")
#load raw counts data
raw_counts_matrix <- (read.csv('data/counts_tables/dpl_raw_counts_kallisto.csv'))
library("edgeR")
#function to parse and arrange data
parse.data <- function(developmental.stage) {
#get instar specific metadata
instar_metadata <- sample_metadata[sample_metadata$developmental.stage == developmental.stage,]
#get instar specific data
instar_data <- raw_counts_matrix[raw_counts_matrix$X %in% instar_metadata$sample.id,]
#separate infected data
infected_metadata <- instar_metadata[instar_metadata$infection.status == 'infected',]
infected_data <- instar_data[instar_data$X %in% infected_metadata$sample.id,]
#separate uninfected data
uninfected_metadata <- instar_metadata[instar_metadata$infection.status == 'uninfected',]
uninfected_data <- instar_data[instar_data$X %in% uninfected_metadata$sample.id,]
#convert infected dataframe to correct format
infected_data_t <- t(infected_data)
colnames(infected_data_t) <- infected_data_t[1,]
infected_data <- infected_data_t[-1,]
infected_data <- matrix(as.numeric(infected_data), ncol = ncol(infected_data))
colnames(infected_data) <- infected_data_t[1,]
rownames(infected_data) <- rownames(infected_data_t)[-1]
#convert uninfected dataframe to correct format
uninfected_data_t <- t(uninfected_data)
colnames(uninfected_data_t) <- uninfected_data_t[1,]
uninfected_data <- uninfected_data_t[-1,]
uninfected_data <- matrix(as.numeric(uninfected_data), ncol = ncol(uninfected_data))
colnames(uninfected_data) <- uninfected_data_t[1,]
rownames(uninfected_data) <- rownames(uninfected_data_t)[-1]
#define infected comparisons
infected.comparisons <- c()
for (sample in colnames(infected_data)) {
if (grepl("ci", sample) == TRUE) {
infected.comparisons <- c(infected.comparisons, "curassavica")
}
if (grepl("ii", sample) == TRUE) {
infected.comparisons <- c(infected.comparisons, "incarnata")
}
}
#define uninfected comparisons
uninfected.comparisons <- c()
for (sample in colnames(uninfected_data)) {
if (grepl("cu", sample) == TRUE) {
uninfected.comparisons <- c(uninfected.comparisons, "curassavica")
}
if (grepl("iu", sample) == TRUE) {
uninfected.comparisons <- c(uninfected.comparisons, "incarnata")
}
}
#assemble output
formatted_data <- list("infected.counts.matrix" = infected_data, "infected.comparisons" = infected.comparisons,
"uninfected.counts.matrix" = uninfected_data, "uninfected.comparisons" = uninfected.comparisons)
return(formatted_data)
}
#function to get and write edgeR data
get.edgeR.dges <- function(developmental.stage, outfile.handle, data) {
#perform DGE analysis for uninfected
#define dgelist object for uninfected
uninfected.dge.obj <- DGEList(counts = data$uninfected.counts.matrix, group = factor(data$uninfected.comparisons))
#filter low quantity genes
uninfected.dge.obj.keep <- filterByExpr(y = uninfected.dge.obj)
uninfected.dge.obj.filtered <- uninfected.dge.obj[uninfected.dge.obj.keep, , keep.lib.sizes=FALSE]
#perform normalization
uninfected.dge.obj.filtered.normalized <- calcNormFactors(object = uninfected.dge.obj.filtered)
#estimate dispersion
uninfected.dge.dispersion <- estimateDisp(y = uninfected.dge.obj.filtered.normalized)
#test for differential expression
uninfected.dge <- exactTest(object = uninfected.dge.dispersion)
#perform fdr correction
uninfected.dge.fdr <- topTags(object = uninfected.dge, n = "Inf")
#write file
write.csv(uninfected.dge.fdr, paste(outfile.handle, "uninfected", sep="_"))
#perform DGE analysis for infected
#define dgelist object for infected
infected.dge.obj <- DGEList(counts = data$infected.counts.matrix, group = factor(data$infected.comparisons))
#filter low quantity genes
infected.dge.obj.keep <- filterByExpr(y = infected.dge.obj)
infected.dge.obj.filtered <- infected.dge.obj[infected.dge.obj.keep, , keep.lib.sizes=FALSE]
#perform normalization
infected.dge.obj.filtered.normalized <- calcNormFactors(object = infected.dge.obj.filtered)
#estimate dispersion
infected.dge.dispersion <- estimateDisp(y = infected.dge.obj.filtered.normalized)
#test for differential expression
infected.dge <- exactTest(object = infected.dge.dispersion)
#perform fdr correction
infected.dge.fdr <- topTags(object = infected.dge, n = "Inf")
#write file
write.csv(infected.dge.fdr, paste(outfile.handle, "infected", sep="_"))
}
#get third instar dges
third.instar.data <- parse.data("third-instar")
get.edgeR.dges('third-instar', 'data/edgeR/incarnata_vs_curassavica_by_infection/third_instar_cur_vs_inc', third.instar.data)
#get fifth instar dges
fifth.instar.data <- parse.data("fifth-instar")
get.edgeR.dges('fifth-instar', 'data/edgeR/incarnata_vs_curassavica_by_infection/fifth_instar_cur_vs_inc', fifth.instar.data)
#get early pupa dges
early.pupa.data <- parse.data("early-pupa")
get.edgeR.dges('early-pupa', 'data/edgeR/incarnata_vs_curassavica_by_infection/early_pupa_cur_vs_inc', early.pupa.data)
#get early pupa dges
early.pupa.data <- parse.data("early-pupa")
get.edgeR.dges('early-pupa', 'data/edgeR/incarnata_vs_curassavica_by_infection/early_pupa_cur_vs_inc', early.pupa.data)
#get late pupa dges
late.pupa.data <- parse.data("late-pupa")
get.edgeR.dges('late-pupa', 'data/edgeR/incarnata_vs_curassavica_by_infection/late_pupa_cur_vs_inc', late.pupa.data)
#get adult dges
adult.data <- parse.data("adult")
get.edgeR.dges('adult', 'data/edgeR/incarnata_vs_curassavica_by_infection/adult_cur_vs_inc', adult.data)
library("vegan")
#load data
counts.matrix <- read.csv('data/counts_tables/dpl_raw_counts_kallisto.csv', stringsAsFactors=FALSE, header=TRUE)
View(counts.matrix)
row.names(counts.matrix) <- counts.matrix[,1]
counts.matrix[,1] <- NULL
View(counts.matrix)
rarefaction <- rarefy(counts.matrix, sample = 1)
head(counts.matrix,2 )
counts.matrix <- data.matrix(counts.matrix)
View(counts.matrix)
rarefaction <- rarefy(counts.matrix, sample = 1)
View(counts.matrix)
counts.matrix.test <- read.csv('data/99_otu_counts_table.csv', stringsAsFactors=FALSE, header=TRUE)
counts.matrix.test <- read.csv('data/counts_tables/99_otu_counts_table.csv', stringsAsFactors=FALSE, header=TRUE)
View(counts.matrix.test)
row.names(counts.matrix.test) <- counts.matrix.test[,1]
counts.matrix.test[,1] <- NULL
View(counts.matrix.test)
#load data
counts.matrix <- read.csv('data/counts_tables/dpl_raw_counts_kallisto.csv', stringsAsFactors=FALSE, header=TRUE)
row.names(counts.matrix) <- counts.matrix[,1]
counts.matrix[,1] <- NULL
View(counts.matrix)
rarefaction <- rarefy(counts.matrix.test, sample = 1)
rareplot <- rarecurve(counts.matrix,test, step = 1, sample = 1, xlab = "Sample Size", ylab = "OTUs")
rareplot <- rarecurve(counts.matrix.test, step = 1, sample = 1, xlab = "Sample Size", ylab = "OTUs")
rarefaction <- rarefy(counts.matrix, sample = 1)
rareplot <- rarecurve(counts.matrix, step = 1, sample = 1, xlab = "Sample Size", ylab = "OTUs")
View(counts.matrix)
counts.matrix[,1]
counts.matrix[,1][1]
typeof(counts.matrix[,1][1])
rarefaction.test <- rarefy(counts.matrix.test, sample = 1)
rareplot.test <- rarecurve(counts.matrix.test, step = 1, sample = 1, xlab = "Sample Size", ylab = "OTUs")
rarefaction <- rarefy(counts.matrix, sample = 1)
rarefaction <- rarefy(counts.matrix, sample = 1)
BiocManager::install("ROntoTools")
require(ROntoTools)
library(ROntoTools)
library("ROntoTools")
BiocManager::install("KEGGREST")
install.packages('RCurl')
install.packages('RCurl')
BiocManager::install("ROntoTools")
library("ROntoTools")
library("graph")
dpl_pathways <- keggPathwayGraphs("dpl", verbose = FALSE)
dpl_pathways <- keggPathwayGraphs("hsa", verbose = FALSE)
View(dpl_pathways)
dpl_pathways <- keggPathwayGraphs("dpl", verbose = FALSE)
dpl_pathways <- keggPathwayGraphs("dpl00010 ", verbose = FALSE)
dpl_pathways <- keggPathwayGraphs("dpl00010", verbose = FALSE)
dpl_pathways <- keggPathwayGraphs("dpl", verbose = FALSE)
library("KEGGREST")
keggList("organism")
keggList("hsa")
keggList("eco")
keggFind("eco")
res <- keggList("hsa")
dpl_pathways <- keggPathwayGraphs("eco", verbose = FALSE)
dpl_pathways <- keggPathwayGraphs("hsa", verbose = FALSE)
res <- keggList("ecoK")
res <- keggList("ecok")
res <- keggList("hsa")
library("ROntoTools")
library("graph")
library("KEGGREST")
dpl_pathways <- keggPathwayGraphs("dpl", updateCache = TRUE, verbose = FALSE)
res <- keggList("dpl")
dpl_pathways <- keggPathwayGraphs("dpl", updateCache = TRUE, verbose = FALSE)
library("ROntoTools")
library("graph")
library("KEGGREST")
dpl_pathways <- keggPathwayGraphs("dpl", updateCache = TRUE, verbose = FALSE)
res <- keggList("dpl")
library("ROntoTools")
dpl_pathways <- keggPathwayGraphs("dpl", updateCache = TRUE, verbose = FALSE)
