y <- c(1,2,3,4,5,6,7,7,8,8,1,1,1,2,3,3)
x <- c(4,5,2,5,4,5,6,7,8,8,1,1,1,2,3,3)
plot(x, y)
?plot
plot(x, y)
plot(x, y, type="l")
length(y.smoothed)
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, n) {
y.smoothed <- c()
for (i in 1:length(y)-n-1) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
return(y.smoothed)
}
y.smoothed <- simple.moving.average(y=y, n=3)
length(y.smoothed)
y.smoothed
n <- 3
for (i in 1:length(y)-n-1) {
print(i)
}
for (i in 1:length(y)) {
print(i)
}
for (i in 1:length(y)-(n-1)) {
print(i)
}
for (i in 1:length(y)-(n)) {
print(i)
}
for (i in 1:length(y)-(n-2)) {
print(i)
}
for (i in 1:length(y)-(n-1)) {
print(i)
}
n <- 4
for (i in 1:length(y)-(n-1)) {
print(i)
}
for (i in 1:length(y)-(n+1)) {
print(i)
}
n <- 3
for (i in 1:length(y)-(n+1)) {
print(i)
}
length(y)-(n+1)
for (i in 1:(length(y)-(n-1))) {
print(i)
}
y <- c(1,2,3,4,5,6,7,7,8,8,1,1,1,2,3,3)
x <- c(4,5,2,5,4,5,6,7,8,8,1,1,1,2,3,3)
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
return(y.smoothed)
}
y.smoothed <- simple.moving.average(y=y, n=3)
length(y.smoothed)
plot(x, y, type="l")
plot(x, y)
x.trunc <- x[1:14]
x.trunc
plot(x.trunc, y.smoothed)
plot(x.trunc, y.smoothed, type="l")
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:length(x)-n+1]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
smoothed.data <- simple.moving.average(y=y, x=x, n=3)
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:(length(x)-(n+1))]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
smoothed.data <- simple.moving.average(y=y, x=x, n=3)
View(smoothed.data)
smoothed.data$x
plot(smoothed.data$x, smoothed.data$y, type="l")
length(smoothed.data$x)
length(smoothed.data$y)
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
for (i in 1:(length(y)-(n-1))) {
print(i)
}
h
length(smoothed.data$x)
y <- c(1,2,3,4,5,6,7,7,8,8,1,1,1,2,3,3)
x <- c(4,5,2,5,4,5,6,7,8,8,1,1,1,2,3,3)
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:(length(x)-(n+1))]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
length(smoothed.data$x)
length(smoothed.data$y)
smoothed.data <- simple.moving.average(y=y, x=x, n=3)
length(smoothed.data$x)
length(smoothed.data$y)
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:(length(x)-(n-1))]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
smoothed.data <- simple.moving.average(y=y, x=x, n=3)
length(smoothed.data$x)
length(smoothed.data$y)
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:(length(x)-(n-1))]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:(length(x)-(n-1))]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:(length(x)-(n-1))]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
smoothed.data <- simple.moving.average(y=y, x=x, n=3)
plot(smoothed.data$x, smoothed.data$y, type="l")
y <- c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1)
x <- c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1)
plot(x, y, type="l")
y <- c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1)
plot(y, type="l")
length(y)
y <- c(1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1)
x <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)
plot(x, y, type="l")
smoothed.data <- simple.moving.average(y=y, x=x, n=3)
plot(smoothed.data$x, smoothed.data$y, type="l")
y <- c(1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1)
length(y)
x <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)
plot(x, y, type="l")
#input[y] = a vector of integers
#input[n] = window size
#output[y.smoothed] = vector of length of length(y)-2
simple.moving.average <- function(y, x, n) {
y.smoothed <- c()
for (i in 1:(length(y)-(n-1))) {
#define window
window <- y[i:i+n-1]
#get average for window
window.average <- mean(window)
#add average to vector
y.smoothed <- c(y.smoothed, window.average)
}
#truncate x values
x.truncated <- x[1:(length(x)-(n-1))]
#assemble and return output
output <- list("y" = y.smoothed, "x" = x.truncated)
return(output)
}
smoothed.data <- simple.moving.average(y=y, x=x, n=3)
plot(smoothed.data$x, smoothed.data$y, type="l")
getwd()
setwd("/home/gabe/Desktop/mtstp/analysis")
#load data
data <- read.csv('../data/counts_tables/dpl_tpm_counts_kallisto.csv')
getwd()
#load data
data <- read.csv('data/counts_tables/dpl_tpm_counts_kallisto.csv')
manhattan.matrix <- dist(data, method='manhattan')
View(data)
metadata <- read.csv('mtstp_analysis_metadata.tsv', sep='\t')
metadata <- read.csv('data/mtstp_analysis_metadata.tsv', sep='\t')
View(metadata)
colnames(data)[colnames(data) == "X"] <- "sample.id"
library(vegan)
test <- data[grepl("infected", data$infection.status), ]
View(test)
test <- metadata[grepl("infected", metadata$infection.status), ]
View(test)
View(test)
test <- subset(metadata, infection.status != "infected")
View(test)
View(test)
metadata <- read.csv('data/mtstp_analysis_metadata.tsv', sep='\t')
#load metadata, remove infected
metadata <- read.csv('data/mtstp_analysis_metadata.tsv', sep='\t')
metadata <- subset(metadata, infection.status != "infected")
View(metadata)
model <- adonis(manhattan.matrix ~ developmental.stage, data=metadata)
model <- adonis2(manhattan.matrix ~ developmental.stage, data=metadata)
lenght(manhattan.matrix)
length(manhattan.matrix)
#get distance matrix
manhattan.matrix <- data.frame(dist(data, method='manhattan'))
View(metadata)
#get distance matrix
manhattan.matrix <- dist(data, method='manhattan')
test <- data.frame(manhattan.matrix)
test <- as.data.frame(manhattan.matrix)
test <- data.frame(as.matrix(manhattan.matrix))
View(test)
#load distance matrix
manhattan.matrix <- as.matrix(read.csv('data/distance_matricies/manhattan.csv'))
manhattan.matrix <- read.csv('data/distance_matricies/manhattan.csv')
View(manhattan.matrix)
#load data
data <- read.csv('data/counts_tables/dpl_tpm_counts_kallisto.csv')
#load metadata
metadata <- read.csv('data/mtstp_analysis_metadata.tsv', sep='\t')
#load distance matrix
manhattan.matrix <- as.matrix(read.csv('data/distance_matricies/manhattan.csv'))
model <- adonis2(manhattan.matrix ~ developmental.stage, data=metadata)
View(manhattan.matrix)
?as.matrix
#load distance matrix
manhattan.matrix <- as.matrix(read.csv('data/distance_matricies/manhattan.csv'))
#run permanova
model <- adonis2(manhattan.matrix ~ developmental.stage, data=metadata)
View(manhattan.matrix)
View(metadata)
dev <- c("developmental.stage")
categories <- metadata[, dev]
rownames(manhattan.matrix) <- rownames(categories)
View(manhattan.matrix)
rownames(manhattan.matrix) <- categories
View(manhattan.matrix)
model <- adonis(manhattan.matrix ~ ., data=metadata)
#load metadata
metadata <- read.csv('data/mtstp_analysis_metadata.tsv', sep='\t')
#load distance matrix
manhattan.matrix <- as.matrix(read.csv('data/distance_matricies/manhattan.csv'))
View(manhattan.matrix)
View(manhattan.matrix)
View(manhattan.matrix)
#load distance matrix
manhattan.matrix <- read.csv('data/distance_matricies/manhattan.csv')
ad.test <- adonis2(manhattan.matrix, data= metadata)
ad.test <- adonis2(manhattan.matrix, data= metadata$developmental.stage)
ad.test <- adonis2(manhattan.matrix ~ developmental.stage, data = metadata)
#load data
data <- read.csv('data/counts_tables/dpl_tpm_counts_kallisto.csv')
#load distance matrix
#manhattan.matrix <- read.csv('data/distance_matricies/manhattan.csv')
manhattan.matrix <- dist(data, method='manhattan')
ad.test <- adonis2(manhattan.matrix ~ developmental.stage, data = metadata)
View(ad.test)
View(ad.test)
ad.test <- pairwise.adonis2(manhattan.matrix ~ developmental.stage, data = metadata)
?pairwise.adonis2
ad.test <- pairwise.adonis2(manhattan.matrix ~ developmental.stage, data = metadata)
library(pairwiseAdonis)
install.packages("pairwiseAdonis")
install.packages('RVAideMemoire')
pairwise.adonis <- function(x,factors, sim.function = 'vegdist', sim.method = 'bray', p.adjust.m ='bonferroni',reduce=NULL,perm=999)
{
co <- combn(unique(as.character(factors)),2)
pairs <- c()
Df <- c()
SumsOfSqs <- c()
F.Model <- c()
R2 <- c()
p.value <- c()
for(elem in 1:ncol(co)){
if(inherits(x, 'dist')){
x1=as.matrix(x)[factors %in% c(as.character(co[1,elem]),as.character(co[2,elem])),
factors %in% c(as.character(co[1,elem]),as.character(co[2,elem]))]
}
else  (
if (sim.function == 'daisy'){
x1 = daisy(x[factors %in% c(co[1,elem],co[2,elem]),],metric=sim.method)
}
else{x1 = vegdist(x[factors %in% c(co[1,elem],co[2,elem]),],method=sim.method)}
)
x2 = data.frame(Fac = factors[factors %in% c(co[1,elem],co[2,elem])])
ad <- adonis2(x1 ~ Fac, data = x2,
permutations = perm);
pairs <- c(pairs,paste(co[1,elem],'vs',co[2,elem]));
Df <- c(Df,ad$Df[1])
SumsOfSqs <- c(SumsOfSqs,ad$SumOfSqs[1])
F.Model <- c(F.Model,ad$F[1]);
R2 <- c(R2,ad$R2[1]);
p.value <- c(p.value,ad$`Pr(>F)`[1])
}
p.adjusted <- p.adjust(p.value,method=p.adjust.m)
sig = c(rep('',length(p.adjusted)))
sig[p.adjusted <= 0.05] <-'.'
sig[p.adjusted <= 0.01] <-'*'
sig[p.adjusted <= 0.001] <-'**'
sig[p.adjusted <= 0.0001] <-'***'
pairw.res <- data.frame(pairs,Df,SumsOfSqs,F.Model,R2,p.value,p.adjusted,sig)
if(!is.null(reduce)){
pairw.res <- subset (pairw.res, grepl(reduce,pairs))
pairw.res$p.adjusted <- p.adjust(pairw.res$p.value,method=p.adjust.m)
sig = c(rep('',length(pairw.res$p.adjusted)))
sig[pairw.res$p.adjusted <= 0.1] <-'.'
sig[pairw.res$p.adjusted <= 0.05] <-'*'
sig[pairw.res$p.adjusted <= 0.01] <-'**'
sig[pairw.res$p.adjusted <= 0.001] <-'***'
pairw.res <- data.frame(pairw.res[,1:7],sig)
}
class(pairw.res) <- c("pwadonis", "data.frame")
return(pairw.res)
}
### Method summary
summary.pwadonis = function(object, ...) {
cat("Result of pairwise.adonis:\n")
cat("\n")
print(object, ...)
cat("\n")
cat("Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n")
}
ad.pairwise <- pairwise.adonis(manhattan.matrix ~ developmental.stage, data = metadata)
#This code was retreived from https://github.com/pmartinezarbizu/pairwiseAdonis/blob/master/pairwiseAdonis/R/pairwise.adonis.R
pairwise.adonis2 <- function(x, data, strata = NULL, nperm=999, ... ) {
#describe parent call function
ststri <- ifelse(is.null(strata),'Null',strata)
fostri <- as.character(x)
#list to store results
#copy model formula
x1 <- x
# extract left hand side of formula
lhs <- eval(x1[[2]], environment(x1), globalenv())
environment(x1) <- environment()
# extract factors on right hand side of formula
rhs <- x1[[3]]
# create model.frame matrix
x1[[2]] <- NULL
rhs.frame <- model.frame(x1, data, drop.unused.levels = TRUE)
# create unique pairwise combination of factors
co <- combn(unique(as.character(rhs.frame[,1])),2)
# create names vector
nameres <- c('parent_call')
for (elem in 1:ncol(co)){
nameres <- c(nameres,paste(co[1,elem],co[2,elem],sep='_vs_'))
}
#create results list
res <- vector(mode="list", length=length(nameres))
names(res) <- nameres
#add parent call to res
res['parent_call'] <- list(paste(fostri[2],fostri[1],fostri[3],', strata =',ststri, ', permutations',nperm ))
#start iteration trough pairwise combination of factors
for(elem in 1:ncol(co)){
#reduce model elements
if(inherits(eval(lhs),'dist')){
xred <- as.dist(as.matrix(eval(lhs))[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),
rhs.frame[,1] %in% c(co[1,elem],co[2,elem])])
}else{
xred <- eval(lhs)[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),]
}
mdat1 <-  data[rhs.frame[,1] %in% c(co[1,elem],co[2,elem]),]
# redefine formula
if(length(rhs) == 1){
xnew <- as.formula(paste('xred',as.character(rhs),sep='~'))
}else{
xnew <- as.formula(paste('xred' ,
paste(rhs[-1],collapse= as.character(rhs[1])),
sep='~'))}
#pass new formula to adonis
if(is.null(strata)){
ad <- adonis2(xnew,data=mdat1, ... )
}else{
perm <- how(nperm = nperm)
setBlocks(perm) <- with(mdat1, mdat1[,ststri])
ad <- adonis2(xnew,data=mdat1,permutations = perm, ... )}
res[nameres[elem+1]] <- list(ad[1:5])
}
#names(res) <- names
class(res) <- c("pwadstrata", "list")
return(res)
}
### Method summary
summary.pwadstrata = function(object, ...) {
cat("Result of pairwise.adonis2:\n")
cat("\n")
print(object[1], ...)
cat("\n")
cat("Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n")
}
ad.pairwise <- pairwise.adonis2(manhattan.matrix ~ developmental.stage, data = metadata)
View(ad.pairwise)
summary.pwadstrata(ad.pairwise)
ad.pairwise.summary <- summary.pwadstrata(ad.pairwise)
View(ad.pairwise)
ad.pairwise$`third-instar_vs_fifth-instar`
ad.pairwise$`third-instar_vs_fifth-instar`
ad.pairwise$`fifth-instar_vs_early-pupa`
ad.pairwise$`adult_vs_late-pupa`
ad.pairwise$`early-pupa_vs_late-pupa`
