se <- sample.sd / sqrt(n)
error.margin <- qt(0.975, df=n-1)*se
#calculate ci
lower.i <- sample.mean - error.margin
upper.i <- sample.mean + error.margin
confidence.interval <- c(lower.i, upper.i)
return(confidence.interval)
}
#A function to simulate a null model of how likely a random subset of genes are to
#show a greater than or equal to amount of expression pattern diversity than the input subset
# input[total.expression.data]: A data frame holding the total expression data
# input[subset.size]: Number of rows to subsample from the "total.expression.data" data frame
# input[subset.diversity]: Diversity of observed subset
# input[iterations]: An integer specifying how many times to randomly subsample the "total.expression.data" data frame
#Note: function mean centers and standardizes expressiond data
#Note: rows with only 0 values should be removed prior to use
null.expression.diversity.test <- function(total.expression.data, subset.size, observed.diversity, iterations) {
#initialize counter for the number of times the random subsample showed equal to or greater than diversity
s.ge.o <- 0
for (i in 1:iterations) {
#randomly subsample data frame
random.subset <- total.expression.data[sample(nrow(total.expression.data), subset.size), ]
#adjust columns for clustering
row.names(random.subset) <- random.subset$genes
random.subset <- random.subset[, -1]
#perform mean centering and standardization
random.subset.standardized <- mean.center.standardize(random.subset)
#perform clustering
clust <- hclust(dist(random.subset.standardized))
tree <- ape::as.phylo(clust)
#calculate diversity by summing branch lengths
branch.lengths <- tree$edge.length
sum.of.lengths <- sum(branch.lengths)
#evaluate the random subsample against the observed diversity
if (sum.of.lengths >= observed.diversity) {
s.ge.o <- s.ge.o + 1
}
}
#get the probability the random subsample is greater than or equal to observed
p.s.ge.o <- s.ge.o / iterations
return(p.s.ge.o)
}
#A function to calculate the Tau index for a row in a data frame
# input[row]: A row or vector of values
# output[tau]: Tau index
compute.tau <- function(row) {
#normalize to maximal component value
row <- row / max(row)
sum.values <- sum(1 - row)
tau <- sum.values / (length(row) - 1)
return(tau)
}
#A function to compare gene family phylogenetic diversity to their expression pattern diversity
# input[gene.clusters] : Path to JSON file, where each key is the name of a gene cluster
#                        and the values are a list of the ids in the corresponding
#                        cluster. File must be readable by rjson.
# input[expression.data] : A data frame with sequence ids in a column called "genes."
#                          The subsequent columns will be used for clustering.
#                          Values must be numeric.
# output[expression.pattern.diversity.metrics] : A data frame that contains the computed
#                                                expression pattern diversity metrics.
compute.expression.pattern.diversity <- function(gene.clusters, expression.data) {
#load sequence clusters
sequence.clusters <- gene.clusters
#sequence.clusters <- rjson::fromJSON(file=gene.clusters)
cluster.names <- names(sequence.clusters)
#initialize vectors to store data
expression.pattern.diversity <- c()
standardized.expression.pattern.diversity <- c()
centered.expression.pattern.diversity <- c()
p.random <- c()
mean.tau <- c()
upper_ci_tau <- c()
lower_ci_tau <- c()
#iterate through clusters
for (id in names(sequence.clusters)) {
#get the corresponding values from the named list
cluster.id <- sequence.clusters[[id]]
#select rows from dataframe
cluster.values <- subset(expression.data, genes %in% cluster.id)
#reassign first column
row.names(cluster.values) <- cluster.values$genes
cluster.values <- cluster.values[, -1]
#remove rows with only 0s
cluster.values <- cluster.values[rowSums(cluster.values != 0) > 0, ]
#perform mean centering
cluster.values.centered <- mean.center(cluster.values)
#perform mean centering and standardization
cluster.values.standardized <- mean.center.standardize(cluster.values)
#if there are enough genes to cluster, do so
if (nrow(cluster.values) > 1) {
#perform clustering on non-standardized values
clust <- hclust(dist(cluster.values))
tree <- ape::as.phylo(clust)
#calculate diversity by summing branch lengths
branch.lengths <- tree$edge.length
sum.of.lengths <- sum(branch.lengths)
expression.pattern.diversity <- c(expression.pattern.diversity, sum.of.lengths)
#perform clustering on mean centered values
centered.clust <- hclust(dist(cluster.values.centered))
centered.tree <- ape::as.phylo(centered.clust)
#calculate diversity by summing branch lengths
centered.branch.lengths <- centered.tree$edge.length
centered.sum.of.lengths <- sum(centered.branch.lengths)
centered.expression.pattern.diversity <- c(centered.expression.pattern.diversity, centered.sum.of.lengths)
#perform clustering on standardized values
standard.clust <- hclust(dist(cluster.values.standardized))
standard.tree <- ape::as.phylo(standard.clust)
#calculate diversity by summing branch lengths
standard.branch.lengths <- standard.tree$edge.length
standard.sum.of.lengths <- sum(standard.branch.lengths)
standardized.expression.pattern.diversity <- c(standardized.expression.pattern.diversity, standard.sum.of.lengths)
#run random null model
#remove 0s from expression data
#non.0.expression.data <- expression.data[rowSums(expression.data != 0) > 0, ]
#print(paste("Calculating null probability for cluster", id, sep=" "))
#p.random.diversity <- null.expression.diversity.test(total.expression.data=non.0.expression.data,
#subset.size=nrow(cluster.values),
#observed.diversity=standardized.expression.pattern.diversity,
#iterations=1000)
p.random.diversity <- 1
p.random <- c(p.random, p.random.diversity)
#calculate tau index for each gene
tau.values <- apply(cluster.values, 1, compute.tau)
mean.tau.value <- mean(tau.values)
mean.tau <- c( mean.tau, mean.tau.value)
#get confidence intervals
ci <- get.ci(tau.values)
upper_95_t_ci <- ci[2]
upper_ci_tau <- c(upper_ci_tau, upper_95_t_ci)
lower_95_t_ci <- ci[1]
lower_ci_tau <- c(lower_ci_tau, lower_95_t_ci)
}
#if not, add NAs
else {
expression.pattern.diversity <- c(expression.pattern.diversity, "NA")
standardized.expression.pattern.diversity <- c(standardized.expression.pattern.diversity, "NA")
centered.expression.pattern.diversity <- c(centered.expression.pattern.diversity, "NA")
p.random <- c(p.random, "NA")
mean.tau <- c(mean.tau, "NA")
upper_ci_tau <- c(upper_ci_tau, "NA")
lower_ci_tau <- c(lower_ci_tau, "NA")
}
}
#assemble and return output
expression.pattern.diversity.metrics <- data.frame(cluster=cluster.names,
expression.pattern.diversity = expression.pattern.diversity,
centered.expression.pattern.diversity = centered.expression.pattern.diversity,
standardized.expression.pattern.diversity = standardized.expression.pattern.diversity,
p.random = p.random,
mean.tau = mean.tau,
upper_tau_ci = upper_ci_tau,
lower_tau_ci = lower_ci_tau)
return(expression.pattern.diversity.metrics)
}
#A function to iteratively calculate phylogenetic diversity of phylogenetic trees
# input[phylogenies.dir.path]: The path to a directory containing phylogenetic trees in newick format
# input[file.extension]: The file extension for phylogeny files
# input[expression.pattern.diversity.data]: A data frame generated by the "compute.expression.pattern.diversity" function.
#                                           The values in "cluster" + file.extension must correspond to the file names
#                                           in the phylogenies.dir.path.
compute.gene.cluster.phylogenetic.diversity <- function(phylogenies.dir.path, file.extension, expression.pattern.diversity.data) {
#initialize vectors to store output
gene.cluster.phylogenetic.diversity <- c()
n.genes <- c()
#get list of files
phylogeny.files <- list.files(phylogenies.dir.path)
#iterate through each gene family in the expression diversity data
for (cluster in expression.pattern.diversity.data$cluster) {
cluster.gene.tree.file <- paste(cluster, file.extension, sep="")
#check if the cluster has a gene tree associated
if (cluster.gene.tree.file %in% phylogeny.files) {
#assemble path to file
cluster.gene.tree.path <- paste(phylogenies.path, "/", cluster.gene.tree.file, sep="")
gene.tree <- ape::read.tree(cluster.gene.tree.path)
#calculate branch lengths
branch.lengths <- gene.tree$edge.length
#calculate phylogenetic diversity
sum.of.lengths <- sum(branch.lengths)
gene.cluster.phylogenetic.diversity <- c(gene.cluster.phylogenetic.diversity, sum.of.lengths)
#add gene family size
n.genes <- c(n.genes, length(gene.tree$tip.label))
}
else {
gene.cluster.phylogenetic.diversity <- c(gene.cluster.phylogenetic.diversity, 'NA')
n.genes <- c(n.genes, 'NA')
}
}
#preserve orgision data frame
phylogenetic.diversity.data <- expression.pattern.diversity.data
#add results to data
phylogenetic.diversity.data$gene.cluster.phylogenetic.diversity <- gene.cluster.phylogenetic.diversity
phylogenetic.diversity.data$n.genes <- n.genes
#return results
return(phylogenetic.diversity.data)
}
#load total expression data
total.expression.data <- read.csv('/home/gabe/Desktop/mtstp/data/intermediate_data/count_tables/dpl_log_tpm_counts_kallisto.csv')
#load metadata
metadata <- read.csv('/home/gabe/Desktop/mtstp/data/experiment_metadata/mtstp_analysis_metadata.tsv', sep='\t')
#remove infected data
total.expression.data <- total.expression.data[substr(total.expression.data$X, 8, 8) != 'i', ]
metadata <- metadata[substr(metadata$sample.id, 8, 8) != 'i', ]
#get developmental stage only
dev.metadata <- data.frame(metadata[, c('developmental.stage', 'sample.id')])
#get medians for each stage
total.data <- merge(total.expression.data, dev.metadata, by.x = "X", by.y = "sample.id")
expr.values <- total.data[, -which(names(total.data) == "developmental.stage")]
median.values <- aggregate(expr.values, by = list(developmental.stage = total.data$developmental.stage), FUN = median)
median.values <- median.values[, !names(median.values) %in% "X"]
median.values <- t(median.values)
#reformat a little
colnames(median.values) <- as.character(unlist(median.values[1, ]))
median.values <- median.values[-1, ]
gene.ids <- data.frame(rownames(median.values))
median.values <- cbind(gene.ids, median.values)
rownames(median.values) <- NULL
names(median.values)[names(median.values) == "rownames.median.values."] <- "genes"
median.values <- median.values[, c("genes", "third-instar", "fifth-instar", "early-pupa", "late-pupa", "adult")]
median.values$`third-instar` <- as.numeric(median.values$`third-instar`)
median.values$`fifth-instar` <- as.numeric(median.values$`fifth-instar`)
median.values$`early-pupa` <- as.numeric(median.values$`early-pupa`)
median.values$`late-pupa` <- as.numeric(median.values$`late-pupa`)
median.values$`adult` <- as.numeric(median.values$`adult`)
#convert gene ids to protein ids
median.values$genes <- sapply(median.values$genes, get.prot.id)
#Running
gene.clusters.file <- "/home/gabe/Desktop/mtstp/data/intermediate_data/gene_cluster_diversity_analysis/psiblast_id-20_e-neg-5_cov-0.7_sequence_clusters.json"
gene.clusters.data <- rjson::fromJSON(file=gene.clusters.file)
gene.expression.diversity <- compute.expression.pattern.diversity(gene.clusters.data, median.values)
phylogenies.path <- '/home/gabe/Desktop/mtstp/data/intermediate_data/gene_cluster_diversity_analysis/inferred_phylogenies_distant'
file.extension <- '_alignment.fasta.treefile'
phylo.data <- compute.gene.cluster.phylogenetic.diversity(phylogenies.path, file.extension, gene.expression.diversity)
phylo.data$standardized.expression.pattern.diversity <- as.numeric(phylo.data$standardized.expression.pattern.diversity)
phylo.data$gene.cluster.phylogenetic.diversity <- as.numeric(phylo.data$gene.cluster.phylogenetic.diversity)
#Get correlations for each group size
#global
cor.test(x=as.numeric(phylo.data$gene.cluster.phylogenetic.diversity), y=as.numeric(phylo.data$standardized.expression.pattern.diversity), method="spearman")
shapiro.test(as.numeric(phylo.data$gene.cluster.phylogenetic.diversity))
shapiro.test(as.numeric(phylo.data$standardized.expression.pattern.diversity))
write.csv(phylo.data, '/home/gabe/Desktop/mtstp/data/intermediate_data/gene_cluster_diversity_analysis/gene_family_diversity_vs_expression_diversity_global_data_distant.csv', row.names=FALSE)
#Get correlations for each group size
#global
cor.test(x=as.numeric(phylo.data$gene.cluster.phylogenetic.diversity), y=as.numeric(phylo.data$standardized.expression.pattern.diversity), method="spearman")
#4 +
n4 <- phylo.data[phylo.data$n.genes == 4, ]
cor.test(x=as.numeric(n4$gene.cluster.phylogenetic.diversity), y=as.numeric(n4$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#5
n5 <- phylo.data[phylo.data$n.genes == 5, ]
cor.test(x=as.numeric(n5$gene.cluster.phylogenetic.diversity), y=as.numeric(n5$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#6
n6 <- phylo.data[phylo.data$n.genes == 6, ]
cor.test(x=as.numeric(n6$gene.cluster.phylogenetic.diversity), y=as.numeric(n6$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#7 +
n7 <- phylo.data[phylo.data$n.genes == 7, ]
cor.test(x=as.numeric(n7$gene.cluster.phylogenetic.diversity), y=as.numeric(n7$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#8 +
n8 <- phylo.data[phylo.data$n.genes == 8, ]
cor.test(x=as.numeric(n8$gene.cluster.phylogenetic.diversity), y=as.numeric(n8$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#9
n9 <- phylo.data[phylo.data$n.genes == 9, ]
cor.test(x=as.numeric(n9$gene.cluster.phylogenetic.diversity), y=as.numeric(n9$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#10
n10 <- phylo.data[phylo.data$n.genes == 10, ]
cor.test(x=as.numeric(n10$gene.cluster.phylogenetic.diversity), y=as.numeric(n10$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#12
n12 <- phylo.data[phylo.data$n.genes == 12, ]
cor.test(x=as.numeric(n12$gene.cluster.phylogenetic.diversity), y=as.numeric(n12$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#14
n14 <- phylo.data[phylo.data$n.genes == 14, ]
cor.test(x=as.numeric(n14$gene.cluster.phylogenetic.diversity), y=as.numeric(n14$standardized.expression.pattern.diversity), method="spearman", alternative="g")
#16
n16 <- phylo.data[phylo.data$n.genes == 16, ]
cor.test(x=as.numeric(n16$gene.cluster.phylogenetic.diversity), y=as.numeric(n16$standardized.expression.pattern.diversity), method="spearman", alternative="g")
View(phylo.data)
#A function to extract protein ids from NCBI gene ids
# input[id]: An NCBI gene id that has the corresponding protein id nested
#            between the second and third underscores
# output[protein.id]: The extracted protein id
get.prot.id <- function(id) {
protein.id <- unlist(strsplit(id, "_"))[3]
return(protein.id)
}
#A function to mean-center each row in a data frame
# input[df]: A data frame with numeric values
# output[df] : A data frame where each row has been mean centered
mean.center <- function(df) {
#apply normalization to each row
normalized.df <- t(apply(df, 1, function(row) {
#get row mean and standard deviation
row.mean <- mean(row, na.rm = TRUE)
#return row minus mean
(row - row.mean)
}))
}
#A function to mean-center and standardize (by standard deviation) each row in a data frame
# input[df]: A data frame with numeric values
# output[df] : A data frame where each row has been standardized
mean.center.standardize <- function(df) {
#apply normalization to each row
normalized.df <- t(apply(df, 1, function(row) {
#get row mean and standard deviation
row.mean <- mean(row, na.rm = TRUE)
row.sd <- sd(row, na.rm = TRUE)
#if standard deviation is 0, throw warning and return unchanged row
if (row.sd == 0) {
warning("Warning: The standard deviation is zero. Returning mean centered values (1s).")
(row - row.mean)
} else {
(row - row.mean) / row.sd
}
}))
}
#A Function to extract pairwise comparisons for phylogenetic-expression divergence correlations
create.pairwise.dataframe <- function(phylogenetic.distance.matrix, expression.pattern.distance.matrix) {
#get gene names
gene.ids <- rownames(phylogenetic.distance.matrix)
# Create an empty dataframe to store pairwise comparisons
pairwise.df <- data.frame(gene1 = character(),
gene2 = character(),
phylogenetic.distance = double(),
expression.distance = double(),
stringsAsFactors = FALSE)
recorded <- c()
# Loop through pairs of genes
for (i in 1:length(gene.ids)){
for (j in 1:length(gene.ids)){
#check if gene ids are different
if (gene.ids[i] != gene.ids[j]){
#check if comparison has already been recorded
pair1 <- c(gene.ids[i], gene.ids[j])
pair2 <- c(gene.ids[j], gene.ids[i])
#add to dataframe
# Extract distances from both matrices
phylo.dist <- phylogenetic.distance.matrix[gene.ids[i], gene.ids[j]]
expr.dist <- expression.pattern.distance.matrix[gene.ids[i], gene.ids[j]]
# Append to the dataframe
pairwise.df <- rbind(pairwise.df, data.frame(gene1 = gene.ids[i],
gene2 = gene.ids[j],
phylogenetic.distance = phylo.dist,
expression.distance = expr.dist))
}
}
}
return(pairwise.df)
}
#A Function to extract pairwise comparisons for phylogenetic-expression divergence correlations
create.pairwise.dataframe <- function(phylogenetic.distance.matrix, expression.pattern.distance.matrix) {
#get gene names
gene.ids <- rownames(phylogenetic.distance.matrix)
# Create an empty dataframe to store pairwise comparisons
pairwise.df <- data.frame(gene1 = character(),
gene2 = character(),
phylogenetic.distance = double(),
expression.distance = double(),
stringsAsFactors = FALSE)
recorded <- c()
# Loop through pairs of genes
for (i in 1:length(gene.ids)){
for (j in 1:length(gene.ids)){
#check if gene ids are different
if (gene.ids[i] != gene.ids[j]) {
#check if comparison has already been recorded
pair1 <- c(gene.ids[i], gene.ids[j])
pair2 <- c(gene.ids[j], gene.ids[i])
#add to dataframe
# Extract distances from both matrices
phylo.dist <- phylogenetic.distance.matrix[gene.ids[i], gene.ids[j]]
expr.dist <- expression.pattern.distance.matrix[gene.ids[i], gene.ids[j]]
# Append to the dataframe
pairwise.df <- rbind(pairwise.df, data.frame(gene1 = gene.ids[i],
gene2 = gene.ids[j],
phylogenetic.distance = phylo.dist,
expression.distance = expr.dist))
}
}
}
return(pairwise.df)
}
# input[gene.clusters] : Path to JSON file, where each key is the name of a gene cluster
#                        and the values are a list of the ids in the corresponding
#                        cluster. File must be readable by rjson.
# input[expression.data] : A data frame with sequence ids in a column called "genes."
#                          The subsequent columns will be used for clustering.
#                          Values must be numeric.
# output[expression.pattern.diversity.metrics] : A data frame that contains the computed
#                                                expression pattern diversity metrics.
# input[phylogenies.dir.path]: The path to a directory containing phylogenetic trees in newick format
# input[file.extension]: The file extension for phylogeny files
compute.phylogeny.expression.correlations <- function(gene.clusters, expression.data, phylogenies.dir.path, file.extension) {
#initialize vector to store data
standard.data <- c()
signif.values <- c()
group.size <- c()
group.pd <- c()
cluster.ids.used <- c()
#load sequence clusters
sequence.clusters <- gene.clusters
#sequence.clusters <- rjson::fromJSON(file=gene.clusters)
cluster.names <- names(sequence.clusters)
#get list of phylogeny files
phylogeny.files <- list.files(phylogenies.dir.path)
#calculate expression and phylogenetic distances
for (id in names(sequence.clusters)) {
#get the corresponding values from the named list
cluster.id <- sequence.clusters[[id]]
#select rows from dataframe
cluster.values <- subset(expression.data, genes %in% cluster.id)
#reassign first column
row.names(cluster.values) <- cluster.values$genes
cluster.values <- cluster.values[, -1]
#remove rows with only 0s
cluster.values <- cluster.values[rowSums(cluster.values != 0) > 0, ]
#perform mean centering and standardization
cluster.values.standardized <- mean.center.standardize(cluster.values)
#if there are enough genes to cluster, do so
if (nrow(cluster.values) > 1) {
#get distance for standardized values
standardized.expression.distance <- as.matrix(dist(cluster.values.standardized, diag = TRUE))
#get phylogenetic distance
cluster.gene.tree.file <- paste(id, file.extension, sep="")
#check if the cluster has a gene tree associated
if (cluster.gene.tree.file %in% phylogeny.files) {
#assemble path to file
cluster.gene.tree.path <- paste(phylogenies.path, "/", cluster.gene.tree.file, sep="")
#read tree
gene.tree <- ape::read.tree(cluster.gene.tree.path)
#phylogenetic distance matrix
phylogenetic.distance.matrix <- as.matrix(ape::cophenetic.phylo(gene.tree))
if (length(phylogenetic.distance.matrix) == length(standardized.expression.distance)) {
#reorder
primary.headers <- rownames(phylogenetic.distance.matrix)
#standardized
standardized.expression.distance.headers <- rownames(standardized.expression.distance)
standardized.expression.distance.headers.re <- standardized.expression.distance.headers[match(primary.headers, standardized.expression.distance.headers)]
standardized.expression.distance <- standardized.expression.distance[match(standardized.expression.distance.headers.re, standardized.expression.distance.headers),
match(standardized.expression.distance.headers.re, standardized.expression.distance.headers)]
#run mantel test
#standardized
mantel.stadardized <- vegan::mantel(as.matrix(phylogenetic.distance.matrix), as.matrix(standardized.expression.distance), permutations = 999)
#get example data
if (id == 'group_340'){
ex1.df <- create.pairwise.dataframe(as.matrix(phylogenetic.distance.matrix), as.matrix(standardized.expression.distance))
write.csv(ex1.df, '/home/gabe/Desktop/mtstp/data/intermediate_data/gene_cluster_diversity_analysis/group_340_correlation_example.csv')
}
if (id == 'group_823'){
ex1.df <- create.pairwise.dataframe(as.matrix(phylogenetic.distance.matrix), as.matrix(standardized.expression.distance))
write.csv(ex1.df, '/home/gabe/Desktop/mtstp/data/intermediate_data/gene_cluster_diversity_analysis/group_823_correlation_example.csv')
}
corr.coeff.standardized <- mantel.stadardized$statistic
significance <- mantel.stadardized$signif
standard.data <- c(standard.data, corr.coeff.standardized)
signif.values <- c(signif.values, significance)
#calculate branch lengths
branch.lengths <- gene.tree$edge.length
#calculate phylogenetic diversity
sum.of.lengths <- sum(branch.lengths)
group.pd <- c(group.pd, sum.of.lengths)
group.size <- c(group.size, length(gene.tree$tip.label))
#add cluster id
cluster.ids.used <- c(cluster.ids.used, id)
}
}
}
}
#assemble output
correlation.results <- list("cluster.id" = cluster.ids.used,
"r" = standard.data,
'p' = signif.values,
"group.size" = group.size,
"group.pd" = group.pd)
return(correlation.results)
}
#load total expression data
total.expression.data <- read.csv('/home/gabe/Desktop/mtstp/data/intermediate_data/count_tables/dpl_log_tpm_counts_kallisto.csv')
#load metadata
metadata <- read.csv('/home/gabe/Desktop/mtstp/data/experiment_metadata/mtstp_analysis_metadata.tsv', sep='\t')
#remove infected data
total.expression.data <- total.expression.data[substr(total.expression.data$X, 8, 8) != 'i', ]
metadata <- metadata[substr(metadata$sample.id, 8, 8) != 'i', ]
#get developmental stage only
dev.metadata <- data.frame(metadata[, c('developmental.stage', 'sample.id')])
#get medians for each stage
total.data <- merge(total.expression.data, dev.metadata, by.x = "X", by.y = "sample.id")
expr.values <- total.data[, -which(names(total.data) == "developmental.stage")]
median.values <- aggregate(expr.values, by = list(developmental.stage = total.data$developmental.stage), FUN = median)
median.values <- median.values[, !names(median.values) %in% "X"]
median.values <- t(median.values)
#reformat a little
colnames(median.values) <- as.character(unlist(median.values[1, ]))
median.values <- median.values[-1, ]
gene.ids <- data.frame(rownames(median.values))
median.values <- cbind(gene.ids, median.values)
rownames(median.values) <- NULL
names(median.values)[names(median.values) == "rownames.median.values."] <- "genes"
median.values <- median.values[, c("genes", "third-instar", "fifth-instar", "early-pupa", "late-pupa", "adult")]
median.values$`third-instar` <- as.numeric(median.values$`third-instar`)
median.values$`fifth-instar` <- as.numeric(median.values$`fifth-instar`)
median.values$`early-pupa` <- as.numeric(median.values$`early-pupa`)
median.values$`late-pupa` <- as.numeric(median.values$`late-pupa`)
median.values$`adult` <- as.numeric(median.values$`adult`)
#convert gene ids to protein ids
median.values$genes <- sapply(median.values$genes, get.prot.id)
#run
gene.clusters.file <- "/home/gabe/Desktop/mtstp/data/intermediate_data/gene_cluster_diversity_analysis/psiblast_id-30_e-neg-10_cov-1_sequence_clusters.json"
gene.clusters.data <- rjson::fromJSON(file=gene.clusters.file)
phylogenies.path <- '/home/gabe/Desktop/mtstp/data/intermediate_data/gene_cluster_diversity_analysis/inferred_phylogenies_close'
file.extension <- '_alignment.fasta.treefile'
distance.correlations <- compute.phylogeny.expression.correlations(gene.clusters.data, median.values, phylogenies.path, file.extension)
distance.correlations.df <- data.frame(distance.correlations)
View(distance.correlations.df)
t.test(distance.correlations.df$r, mu = 0)
