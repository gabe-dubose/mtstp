View(distances)
length(distances)
#load distance matrix
distances <- read.csv('../data/distance_matricies/euclidian.csv')
#rename x to sampe.id
colnames(distances)[1] <- 'sample.id'
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
#remove infected data
infected.ids <- metadata[metadata$infection.status == 'infected',]$sample.id
distances <- distances[,!names(distances) %in% infected.ids]
distances <- distances[!distances$sample.id %in% infected.ids,]
#remove sample id column
distances <- distances[2:length(distances)]
View(distances)
#run PCA
uninf.pca <- princomp(distances)
View(uninf.pca)
plot(uninf.pca)
biplot(uninf.pca)
uninf.pca$
uninf.pca$loadings
uninf.pca$loadings
#load distance matrix
distances <- read.csv('../data/distance_matricies/euclidian.csv')
View(distances)
#run PCA
uninf.pca <- princomp(distances)
#remove sample id column
distances <- as.matrix(distances[2:length(distances)])
#load distance matrix
distances <- read.csv('../data/distance_matricies/euclidian.csv')
#rename x to sampe.id
colnames(distances)[1] <- 'sample.id'
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
#remove infected data
infected.ids <- metadata[metadata$infection.status == 'infected',]$sample.id
distances <- distances[,!names(distances) %in% infected.ids]
distances <- distances[!distances$sample.id %in% infected.ids,]
#remove sample id column
distances <- matrix(distances[1:length(distances)])
#run PCA
uninf.pca <- princomp(distances)
#load distance matrix
distances <- read.csv('../data/distance_matricies/euclidian.csv')
#rename x to sampe.id
colnames(distances)[1] <- 'sample.id'
metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep='\t')
#remove infected data
infected.ids <- metadata[metadata$infection.status == 'infected',]$sample.id
distances <- distances[,!names(distances) %in% infected.ids]
distances <- distances[!distances$sample.id %in% infected.ids,]
#remove sample id column
distances <- t(distances[2:length(distances)])
#run PCA
uninf.pca <- princomp(distances)
biplot(uninf.pca)
uninf.pca$loadings
uninf.pca$x
uninf.pca$scale
uninf.pca$call
uninf.pca$x
#run PCA
uninf.pca <- prcomp(distances)
uninf.pca$x
pca.coords <- data.frame(uninf.pca$x)
View(pca.coords)
#write PCA results
write.csv(pca.coords, '../data/uninfected_pca.csv')
uninf.pca$x
uninf.pca$sdev
#print summary
summary(uninf.pca)
6.116e-01
#print summary
print(summary(uninf.pca))
#write PCA results
write.csv(pca.coords, '../data/uninfected_pca.csv')
library("edgeR")
#load metadata
sample_metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep="\t")
#load raw counts data
raw_counts_matrix <- (read.csv('../data/counts_tables/dpl_raw_counts_kallisto.csv'))
uninfected_metadata <- sample_metadata[sample_metadata$infection.status != 'infected',]
uninfected_data <- raw_counts_matrix[raw_counts_matrix$X %in% uninfected_metadata$sample.id,]
#function to parse and arrange data
parse.data <- function(from, to, data, metadata, plant) {
#separate plant data
plant_metadata <- metadata[metadata$plant == plant,]
data <- data[data$X %in% plant_metadata$sample.id,]
#separate from data
from_metadata <- metadata[metadata$developmental.stage == from,]
from_data <- data[data$X %in% from_metadata$sample.id,]
#separate to data
to_metadata <- metadata[metadata$developmental.stage == to,]
to_data <- data[data$X %in% to_metadata$sample.id,]
#convert from dataframe to correct format
from_data_t <- t(from_data)
colnames(from_data_t) <- from_data_t[1,]
from_data <- from_data_t[-1,]
from_data <- matrix(as.numeric(from_data), ncol = ncol(from_data))
colnames(from_data) <- from_data_t[1,]
rownames(from_data) <- rownames(from_data_t)[-1]
#convert to dataframe to correct format
to_data_t <- t(to_data)
colnames(to_data_t) <- to_data_t[1,]
to_data <- to_data_t[-1,]
to_data <- matrix(as.numeric(to_data), ncol = ncol(to_data))
colnames(to_data) <- to_data_t[1,]
rownames(to_data) <- rownames(to_data_t)[-1]
#assemble output
formatted_data <- list("from" = from_data, "to" = to_data)
return(formatted_data)
}
test <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata')
categories = c("third-instar", 'fifth-instar')
stages_metadata <- uninfected_metadata[uninfected_metadata$developmental.stage %in% categories]
stages_metadata <- uninfected_metadata[uninfected_metadata$developmental.stage %in% categories,]
View(sample_metadata)
View(stages_metadata)
#function to parse and arrange data
parse.data <- function(from, to, data, metadata, plant) {
#separate plant data
plant_metadata <- metadata[metadata$plant == plant,]
data <- data[data$X %in% plant_metadata$sample.id,]
#separate data
categories = c(from, to)
stages_metadata <- plant_metadata[plant_metadata$developmental.stage %in% categories,]
stages_data <- data[data$X %in% stages_metadata$sample.id,]
#convert from dataframe to correct format
stages_data_t <- t(stages_data)
colnames(stages_data_t) <- stages_data_t[1,]
stages_data <- stages_data_t[-1,]
stages_data <- matrix(as.numeric(stages_data), ncol = ncol(stages_data))
colnames(stages_data) <- stages_data_t[1,]
rownames(stages_data) <- rownames(stages_data_t)[-1]
#assemble output
formatted_data <- list("matrix" = stages_data)
return(formatted_data)
}
test <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata')
test$matrix
#function to parse and arrange data
parse.data <- function(from, to, data, metadata, plant, comp1, comp2) {
#separate plant data
plant_metadata <- metadata[metadata$plant == plant,]
data <- data[data$X %in% plant_metadata$sample.id,]
#separate data
categories = c(from, to)
stages_metadata <- plant_metadata[plant_metadata$developmental.stage %in% categories,]
stages_data <- data[data$X %in% stages_metadata$sample.id,]
#convert from dataframe to correct format
stages_data_t <- t(stages_data)
colnames(stages_data_t) <- stages_data_t[1,]
stages_data <- stages_data_t[-1,]
stages_data <- matrix(as.numeric(stages_data), ncol = ncol(stages_data))
colnames(stages_data) <- stages_data_t[1,]
rownames(stages_data) <- rownames(stages_data_t)[-1]
#define comparisons
comparisons <- c()
for (sample in colnames(stages_data)) {
if (grepl(comp1, sample) == TRUE) {
comparisons <- c(curassavica.comparisons, from)
}
if (grepl(comp2, sample) == TRUE) {
comparisons <- c(curassavica.comparisons, to)
}
}
#assemble output
formatted_data <- list("matrix" = stages_data, "comparisons" = comparisons)
return(formatted_data)
}
test <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata', "3", '5')
#function to parse and arrange data
parse.data <- function(from, to, data, metadata, plant, comp1, comp2) {
#separate plant data
plant_metadata <- metadata[metadata$plant == plant,]
data <- data[data$X %in% plant_metadata$sample.id,]
#separate data
categories = c(from, to)
stages_metadata <- plant_metadata[plant_metadata$developmental.stage %in% categories,]
stages_data <- data[data$X %in% stages_metadata$sample.id,]
#convert from dataframe to correct format
stages_data_t <- t(stages_data)
colnames(stages_data_t) <- stages_data_t[1,]
stages_data <- stages_data_t[-1,]
stages_data <- matrix(as.numeric(stages_data), ncol = ncol(stages_data))
colnames(stages_data) <- stages_data_t[1,]
rownames(stages_data) <- rownames(stages_data_t)[-1]
#define comparisons
comparisons <- c()
for (sample in colnames(stages_data)) {
if (grepl(comp1, sample) == TRUE) {
comparisons <- c(comparisons, from)
}
if (grepl(comp2, sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
#assemble output
formatted_data <- list("matrix" = stages_data, "comparisons" = comparisons)
return(formatted_data)
}
test <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata', "3", '5')
test$matrix
test$comparisons
#function to get and write edgeR data
get.edgeR.dges <- function(data, outfile.handle, plant) {
#perform DGE analysis
dge.obj <- DGEList(counts = data$matrix, group = factor(data$comparisons))
#filter low quantity genes
dge.obj.keep <- filterByExpr(y = dge.obj)
dge.obj.filtered <- dge.obj[dge.obj.keep, , keep.lib.sizes=FALSE]
#perform normalization
dge.obj.filtered.normalized <- calcNormFactors(object = dge.obj.filtered)
#estimate dispersion
dge.dispersion <- estimateDisp(y = dge.obj.filtered.normalized)
#test for differential expression
dge <- exactTest(object = dge.dispersion)
#perform fdr correction
dge.fdr <- topTags(object = dge, n = "Inf")
#write file
write.csv(dge.fdr, paste(outfile.handle, plant, sep="_"))
}
third.to.fifth.inc.data <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata', "3", '5')
#function to get and write edgeR data
get.edgeR.dges <- function(data, outfile.handle, plant) {
#perform DGE analysis
dge.obj <- DGEList(counts = data$matrix, group = factor(data$comparisons))
#filter low quantity genes
dge.obj.keep <- filterByExpr(y = dge.obj)
dge.obj.filtered <- dge.obj[dge.obj.keep, , keep.lib.sizes=FALSE]
#perform normalization
dge.obj.filtered.normalized <- calcNormFactors(object = dge.obj.filtered)
#estimate dispersion
dge.dispersion <- estimateDisp(y = dge.obj.filtered.normalized)
#test for differential expression
dge <- exactTest(object = dge.dispersion)
#perform fdr correction
dge.fdr <- topTags(object = dge, n = "Inf")
#write file
write.csv(dge.fdr, paste(outfile.handle, plant, sep="_"))
}
get.edgeR.dges(third.to.fifth.inc.data, 'data/edgeR/across_development/third_to_fifth_inc')
third.to.fifth.inc.data$matrix
third.to.fifth.inc.data$comparisons
#load metadata
sample_metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep="\t")
#load raw counts data
raw_counts_matrix <- (read.csv('../data/counts_tables/dpl_raw_counts_kallisto.csv'))
library("edgeR")
#load metadata
sample_metadata <- read.csv('../data/mtstp_analysis_metadata.tsv', sep="\t")
#load raw counts data
raw_counts_matrix <- (read.csv('../data/counts_tables/dpl_raw_counts_kallisto.csv'))
uninfected_metadata <- sample_metadata[sample_metadata$infection.status != 'infected',]
uninfected_data <- raw_counts_matrix[raw_counts_matrix$X %in% uninfected_metadata$sample.id,]
#function to parse and arrange data
parse.data <- function(from, to, data, metadata, plant, comp1, comp2) {
#separate plant data
plant_metadata <- metadata[metadata$plant == plant,]
data <- data[data$X %in% plant_metadata$sample.id,]
#separate data
categories = c(from, to)
stages_metadata <- plant_metadata[plant_metadata$developmental.stage %in% categories,]
stages_data <- data[data$X %in% stages_metadata$sample.id,]
#convert from dataframe to correct format
stages_data_t <- t(stages_data)
colnames(stages_data_t) <- stages_data_t[1,]
stages_data <- stages_data_t[-1,]
stages_data <- matrix(as.numeric(stages_data), ncol = ncol(stages_data))
colnames(stages_data) <- stages_data_t[1,]
rownames(stages_data) <- rownames(stages_data_t)[-1]
#define comparisons
comparisons <- c()
for (sample in colnames(stages_data)) {
if (grepl(comp1, sample) == TRUE) {
comparisons <- c(comparisons, from)
}
if (grepl(comp2, sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
#assemble output
formatted_data <- list("matrix" = stages_data, "comparisons" = comparisons)
return(formatted_data)
}
#function to get and write edgeR data
get.edgeR.dges <- function(data, outfile.handle, plant) {
#perform DGE analysis
dge.obj <- DGEList(counts = data$matrix, group = factor(data$comparisons))
#filter low quantity genes
dge.obj.keep <- filterByExpr(y = dge.obj)
dge.obj.filtered <- dge.obj[dge.obj.keep, , keep.lib.sizes=FALSE]
#perform normalization
dge.obj.filtered.normalized <- calcNormFactors(object = dge.obj.filtered)
#estimate dispersion
dge.dispersion <- estimateDisp(y = dge.obj.filtered.normalized)
#test for differential expression
dge <- exactTest(object = dge.dispersion)
#perform fdr correction
dge.fdr <- topTags(object = dge, n = "Inf")
#write file
write.csv(dge.fdr, paste(outfile.handle, plant, sep="_"))
}
third.to.fifth.inc.data <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata', "3", '5')
third.to.fifth.inc.data$comparisons
View(sample_metadata)
get.edgeR.dges(third.to.fifth.inc.data, 'data/edgeR/across_development/third_to_fifth_inc')
#define comparisons
comparisons <- c()
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
if (grepl(comp1, sample) == TRUE) {
comparisons <- c(comparisons, from)
}
if (grepl(comp2, sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
if (grepl('third-instar', sample) == TRUE) {
comparisons <- c(comparisons, from)
}
if (grepl('fifth-instar', sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
#define comparisons
comparisons <- c()
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
if (grepl('third-instar', sample) == TRUE) {
comparisons <- c(comparisons, from)
}
if (grepl('fifth-instar', sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
comparisons
#define comparisons
comparisons <- c()
from <- 'third'
to <- 'fifth'
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
if (grepl('third-instar', sample) == TRUE) {
comparisons <- c(comparisons, from)
}
if (grepl('fifth-instar', sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
comparisons
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
print(sample)
}
#define comparisons
comparisons <- c()
from <- 'third'
to <- 'fifth'
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
if (grepl('3', sample) == TRUE) {
comparisons <- c(comparisons, from)
}
if (grepl('5', sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
comparisons
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
print(sample)
}
#define comparisons
comparisons <- c()
from <- 'third'
to <- 'fifth'
for (sample in colnames(third.to.fifth.inc.data$matrix)) {
if (grepl('3', sample) == TRUE) {
comparisons <- c(comparisons, from)
}
else if (grepl('5', sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
comparisons
#function to parse and arrange data
parse.data <- function(from, to, data, metadata, plant, comp1, comp2) {
#separate plant data
plant_metadata <- metadata[metadata$plant == plant,]
data <- data[data$X %in% plant_metadata$sample.id,]
#separate data
categories = c(from, to)
stages_metadata <- plant_metadata[plant_metadata$developmental.stage %in% categories,]
stages_data <- data[data$X %in% stages_metadata$sample.id,]
#convert from dataframe to correct format
stages_data_t <- t(stages_data)
colnames(stages_data_t) <- stages_data_t[1,]
stages_data <- stages_data_t[-1,]
stages_data <- matrix(as.numeric(stages_data), ncol = ncol(stages_data))
colnames(stages_data) <- stages_data_t[1,]
rownames(stages_data) <- rownames(stages_data_t)[-1]
#define comparisons
comparisons <- c()
for (sample in colnames(stages_data)) {
if (grepl(comp1, sample) == TRUE) {
comparisons <- c(comparisons, from)
}
else if (grepl(comp2, sample) == TRUE) {
comparisons <- c(comparisons, to)
}
}
#assemble output
formatted_data <- list("matrix" = stages_data, "comparisons" = comparisons)
return(formatted_data)
}
#function to get and write edgeR data
get.edgeR.dges <- function(data, outfile.handle, plant) {
#perform DGE analysis
dge.obj <- DGEList(counts = data$matrix, group = factor(data$comparisons))
#filter low quantity genes
dge.obj.keep <- filterByExpr(y = dge.obj)
dge.obj.filtered <- dge.obj[dge.obj.keep, , keep.lib.sizes=FALSE]
#perform normalization
dge.obj.filtered.normalized <- calcNormFactors(object = dge.obj.filtered)
#estimate dispersion
dge.dispersion <- estimateDisp(y = dge.obj.filtered.normalized)
#test for differential expression
dge <- exactTest(object = dge.dispersion)
#perform fdr correction
dge.fdr <- topTags(object = dge, n = "Inf")
#write file
write.csv(dge.fdr, paste(outfile.handle, plant, sep="_"))
}
third.to.fifth.inc.data <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata', "3", '5')
get.edgeR.dges(third.to.fifth.inc.data, 'data/edgeR/across_development/third_to_fifth_inc')
get.edgeR.dges(third.to.fifth.inc.data, 'data/edgeR/across_development/third_to_fifth_inc', 'incarnata')
get.edgeR.dges(third.to.fifth.inc.data, '../data/edgeR/across_development/third_to_fifth_inc', 'incarnata')
third.to.fifth.cur.data <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'curassavica', "3", '5')
get.edgeR.dges(third.to.fifth.inc.data, '../data/edgeR/across_development/third_to_fifth_cur', 'curassavica')
third.to.fifth.inc.data <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'incarnata', "3", '5')
get.edgeR.dges(third.to.fifth.inc.data, '../data/edgeR/across_development/third_to_fifth_inc', 'incarnata')
third.to.fifth.cur.data <- parse.data('third-instar', 'fifth-instar', uninfected_data, sample_metadata, 'curassavica', "3", '5')
get.edgeR.dges(third.to.fifth.cur.data, '../data/edgeR/across_development/third_to_fifth_cur', 'curassavica')
View(uninfected_metadata)
#5-E
fifth.to.early.inc.data <- parse.data('fifth-instar', 'early-pupa', uninfected_data, sample_metadata, 'incarnata', "5", 'E')
get.edgeR.dges(fifth.to.early.inc.data, '../data/edgeR/across_development/third_to_fifth_inc', 'incarnata')
fifth.to.early.cur.data <- parse.data('fifth-instar', 'early-pupa', uninfected_data, sample_metadata, 'curassavica', "5", 'E')
get.edgeR.dges(fifth.to.early.cur.data, '../data/edgeR/across_development/third_to_fifth_cur', 'curassavica')
#5-E
fifth.to.early.inc.data <- parse.data('fifth-instar', 'early-pupa', uninfected_data, sample_metadata, 'incarnata', "5", 'E')
get.edgeR.dges(fifth.to.early.inc.data, '../data/edgeR/across_development/fifth_to_early_inc', 'incarnata')
fifth.to.early.cur.data <- parse.data('fifth-instar', 'early-pupa', uninfected_data, sample_metadata, 'curassavica', "5", 'E')
get.edgeR.dges(fifth.to.early.cur.data, '../data/edgeR/across_development/fifth_to_early_cur', 'curassavica')
#E-L
early.to.late.inc.data <- parse.data('early-pupa', 'late-pupa', uninfected_data, sample_metadata, 'incarnata', "E", 'L')
get.edgeR.dges(early.to.late.inc.data, '../data/edgeR/across_development/early_to_late_inc', 'incarnata')
early.to.late.cur.data <- parse.data('early-pupa', 'late-pupa', uninfected_data, sample_metadata, 'curassavica', "E", 'L')
get.edgeR.dges(early.to.late.cur.data, '../data/edgeR/across_development/early_to_late_cur', 'curassavica')
#L-A
late.to.adult.inc.data <- parse.data('late-pupa', 'adult', uninfected_data, sample_metadata, 'incarnata', "L", 'A')
get.edgeR.dges(late.to.adult.inc.data, '../data/edgeR/across_development/late_to_adult_inc', 'incarnata')
late.to.adult.cur.data <- parse.data('late-pupa', 'adult', uninfected_data, sample_metadata, 'curassavica', "L", 'A')
get.edgeR.dges(late.to.adult.cur.data, '../data/edgeR/across_development/late_to_adult_cur', 'curassavica')
metabolism <- read.csv('../data/function_tables/metabolism_nonredundant.csv')
View(metabolism)
organismal.systems <- read.csv('../data/function_tables/organismal_systems_nonredundant.csv')
View(organismal.systems)
genetic.information.processing <- read.csv('../data/function_tables/genetic_information_processing_nonredundant.csv')
cellular.processes <- read.csv('../data/function_tables/cellular_processes_nonredundant.csv')
View(cellular.processes)
View(metabolism)
?merge
test <- merge(metabolism, organismal.systems, by="sample.id")
View(test)
test <- merge(metabolism, organismal.systems, by="sample.id", no.dups=TRUE)
View(test)
View(test)
metabolism = metabolism[,!(names(metabolism) %in% drop)]
drop <- c("plant", "developmental.stage")
metabolism = metabolism[,!(names(metabolism) %in% drop)]
View(metabolism)
drop <- c("plant", "developmental_stage")
metabolism = metabolism[,!(names(metabolism) %in% drop)]
View(metabolism)
organismal.systems = organismal.systems[,!(names(organismal.systems) %in% drop)]
View(organismal.systems)
genetic.information.processing = genetic.information.processing[,!(names(genetic.information.processing) %in% drop)]
View(cellular.processes)
data <- merge(metabolism, organismal.systems, by="sample.id")
View(data)
data <- merge(data, genetic.information.processing, by="sample.id")
View(data)
data <- merge(data, cellular.processes, by="sample.id")
View(data)
df <- data[,!(names(data) %in% drop)]
View(df)
cor.data <- cor(df)
df <- df[,-1]
View(df)
View(df)
View(data)
cor.data <- cor(df)
cor.data <- data.frame(cor.data)
View(cor.data)
heatmap(cor.data)
cor.data <- cor(df)
heatmap(cor.data)
heatmap(cor.data)
?cor
heatmap(cor.data, col = terrain.colors(256))
cor.data <- data.frame(cor.data)
View(cor.data)
write.csv('../data/functional_correlations.csv')
write.csv(cor.data, '../data/functional_correlations.csv')
